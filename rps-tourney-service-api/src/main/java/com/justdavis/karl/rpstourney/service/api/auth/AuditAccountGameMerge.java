package com.justdavis.karl.rpstourney.service.api.auth;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.justdavis.karl.rpstourney.service.api.game.Game;
import com.justdavis.karl.rpstourney.service.api.game.PlayerRole;

/**
 * <p>
 * Each {@link AuditAccountGameMerge} instance records a {@link Game} that was modified as part of an XXX operation.
 * Every {@link AuditAccountGameMerge} instance is a child of its parent {@link AuditAccountMerge} instance.
 * </p>
 * <p>
 * This class supports JPA. This class supports JAX-B.
 * </p>
 */
@Entity
@Table(name = "`AuditAccountGameMerges`")
public class AuditAccountGameMerge {
	/*
	 * FIXME Would rather use GenerationType.IDENTITY, but can't, due to
	 * https://hibernate.atlassian.net/browse/HHH-9430.
	 */
	/*
	 * FIXME Would rather sequence name was mixed-case, but it can't be, due to
	 * https://hibernate.atlassian.net/browse/HHH-9431.
	 */
	@Id
	@Column(name = "`id`", nullable = false, updatable = false)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "AuditAccountGameMerges_id_seq")
	@SequenceGenerator(name = "AuditAccountGameMerges_id_seq", sequenceName = "`auditaccountgamemerges_id_seq`", allocationSize = 1)
	private long id;

	@ManyToOne(optional = false, cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH,
			CascadeType.DETACH })
	@JoinColumn(name = "`parentAuditAccountMergeId`", nullable = false, updatable = false)
	private AuditAccountMerge parentAuditAccountMerge;

	@ManyToOne(optional = false, cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH,
			CascadeType.DETACH })
	/*
	 * FIXME This column can't be quoted unless/until https://hibernate.atlassian.net/browse/HHH-9427 is resolved.
	 */
	@JoinColumn(name = "gameId", nullable = false, updatable = false)
	private Game game;

	@Column(name = "`playerRole`", nullable = false, updatable = false)
	@Enumerated(EnumType.STRING)
	private PlayerRole playerRole;

	/**
	 * Constructs a new {@link AuditAccountGameMerge} instance.
	 *
	 * @param parentAuditAccountMerge
	 *            the value to use for {@link #getParentAuditAccountMerge()}
	 * @param game
	 *            the value to use for {@link #getGame()}
	 * @param playerRole
	 *            the value to use for {@link #getPlayerRole()}
	 */
	public AuditAccountGameMerge(AuditAccountMerge parentAuditAccountMerge, Game game, PlayerRole playerRole) {
		this.id = -1;
		this.parentAuditAccountMerge = parentAuditAccountMerge;
		this.game = game;
		this.playerRole = playerRole;
	}

	/**
	 * <strong>Not intended for use:</strong> This constructor is only provided to comply with the JAXB and JPA specs.
	 */
	@Deprecated
	AuditAccountGameMerge() {
		this.id = -1;
	}

	/**
	 * @return <code>true</code> if this {@link AuditAccountGameMerge} has been assigned an ID (which it should if it's
	 *         been persisted), <code>false</code> if it has not
	 */
	public boolean hasId() {
		return id > -1;
	}

	/**
	 * <p>
	 * Returns the unique integer that identifies and represents this {@link AuditAccountGameMerge} instance.
	 * </p>
	 * <p>
	 * This value will be assigned by JPA when the {@link Entity} is persisted. Until then, this value should not be
	 * accessed.
	 * </p>
	 *
	 * @return the unique integer that identifies and represents this {@link AuditAccountGameMerge} instance
	 */
	public long getId() {
		if (!hasId())
			throw new IllegalStateException("Field value not yet available.");

		return id;
	}

	/**
	 * @return the parent {@link AuditAccountMerge} instance that this {@link AuditAccountGameMerge} is a part of
	 */
	public AuditAccountMerge getParentAuditAccountMerge() {
		return parentAuditAccountMerge;
	}

	/**
	 * @return the {@link Game} that was merged
	 */
	public Game getGame() {
		return game;
	}

	/**
	 * @return the {@link PlayerRole} indicating whether {@link Game#getPlayer1()} or {@link Game#getPlayer2()} is
	 *         represented by this {@link AuditAccountGameMerge} instance
	 */
	public PlayerRole getPlayerRole() {
		return playerRole;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		/*
		 * Uses the id field (which has a UNIQUE constraint in the DB) when present, otherwise falls back to the
		 * superclass' implementation (mostly for the benefit of unit tests).
		 */

		if (hasId()) {
			/*
			 * Generated by Eclipse's "Source > Generate hashCode() and equals()..." function.
			 */
			final int prime = 31;
			int result = 1;
			result = prime * result + (int) (id ^ (id >>> 32));
			return result;
		} else {
			return super.hashCode();
		}
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		/*
		 * Uses the id field (which has a UNIQUE constraint in the DB) when present, otherwise falls back to instance
		 * equality (mostly for the benefit of unit tests).
		 */

		if (hasId()) {
			/*
			 * Generated by Eclipse's "Source > Generate hashCode() and equals()..." function.
			 */
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			AuditAccountGameMerge other = (AuditAccountGameMerge) obj;
			if (id != other.id)
				return false;
			return true;
		} else {
			return this == obj;
		}
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("AuditAccountGameMerge [id=");
		builder.append(id);
		builder.append(", parentAuditAccountMerge.id=");
		if (parentAuditAccountMerge.hasId())
			builder.append(parentAuditAccountMerge.getId());
		builder.append(", game=");
		builder.append(game);
		builder.append(", playerRole=");
		builder.append(playerRole);
		builder.append("]");
		return builder.toString();
	}

}
