<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.rpstourney</groupId>
		<artifactId>rps-tourney-parent</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>rps-tourney-service-api</artifactId>
	<packaging>jar</packaging>

	<name>rps-tourney-service-api</name>
	<description>
		The API definitions for the web service layer of the "Rock-Paper-Scissors Tourney"
		game, which allow for play over the Internet.
	</description>

	<properties>
	</properties>

	<dependencies>
		<dependency>
			<!-- Used for all sorts of misc. things. -->
			<groupId>com.justdavis.karl.jessentials</groupId>
			<artifactId>jessentials-misc</artifactId>
		</dependency>

		<dependency>
			<!-- SLF4J is used to make the Java logging dependency mess somewhat sane. 
				Its APIs should be used by all of the application suite for logging, rather 
				than the java.util logging, log4j, or whatever else. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<!-- The web service resources/methods defined in this project are all
				defined as JAX-RS 2.1 resources. -->
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<!-- Provides annotations for securing resources, e.g. @RolesAllowed, 
				@PermitAll, etc. -->
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<!-- The Jackson annotation library is used to ensure that any of the 
				model classes here are handled properly if some other project (e.g. the webapp) 
				marshalls them to JSON using Jackson. -->
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<dependency>
			<!-- Provides the InternetAddress class used to represent email addresses 
				in this project. -->
			<!-- This dependency will be shadowed/overridden if this is deployed to 
				a Java EE container. -->
			<groupId>org.eclipse.jetty.orbit</groupId>
			<artifactId>javax.mail.glassfish</artifactId>
			<version>1.4.1.v201005082020</version>
		</dependency>

		<dependency>
			<!-- Hibernate is a popular ORM that implements the JPA 2.1 spec. It's 
				used for building and interacting with the application's SQL database. -->
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
			<exclusions>
				<!-- Excluding all of Hibernate's transitive dependencies, as we're just 
					using it (in this specific module) for its @Type annotation. -->
				<exclusion>
					<groupId>org.hibernate.common</groupId>
					<artifactId>hibernate-commons-annotations</artifactId>
				</exclusion>
				<exclusion>
					<groupId>dom4j</groupId>
					<artifactId>dom4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.javassist</groupId>
					<artifactId>javassist</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml</groupId>
					<artifactId>classmate</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.jboss.spec.javax.transaction</groupId>
					<artifactId>jboss-transaction-api_1.2_spec</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.jboss</groupId>
					<artifactId>jandex</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.jboss.logging</groupId>
					<artifactId>jboss-logging</artifactId>
				</exclusion>
				<exclusion>
					<groupId>antlr</groupId>
					<artifactId>antlr</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- The Hibernate JPA Model Generator, which will produce MetaModel classes 
				for JPA entities. This happens happens automagically via javac's annotation 
				processor. -->
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		<dependency>
			<!-- This is the reference implementation for the "bean validation" spec, 
				which has a transitive dependency on the API. The implementation is included 
				here (instead of just the API) to allow use of its custom validation annotations. -->
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.18.Final</version>
		</dependency>

		<dependency>
			<!-- JUnit is used for all unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Provides a JAX-RS 2.1 implementation for this project's tests to
				use. (Without one of these available, some of the tests will blow up with
				ClassNotFoundExceptions. For example: GameConflictException can't be used
				without this.) -->
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The Jackson library is used by some downstream projects (e.g. the 
				webapp) to serialize this project's model objects via JSON. Used here in 
				tests to verify that serialization works correctly. -->
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on unit test coverage), such that 
							it can be passed as a VM argument to the application under test. Surefire 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on integration test coverage), such 
							that it can be passed as a VM argument to the application under test. Failsafe 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
						<configuration>
							<destFile>${sonar.integration.reportPath}</destFile>
							<append>true</append>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of 
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
