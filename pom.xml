<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<prerequisites>
		<maven>3.0</maven>
	</prerequisites>

	<parent>
		<groupId>com.justdavis.karl.jessentials</groupId>
		<artifactId>jessentials-parent</artifactId>
		<version>6.0.0</version>
	</parent>

	<groupId>com.justdavis.karl.rpstourney</groupId>
	<artifactId>rps-tourney-parent</artifactId>
	<version>2.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>rps-tourney-parent</name>
	<description>
		The parent POM for the "Rock-Paper-Scissors Tourney" games.
	</description>
	<url>https://github.com/karlmdavis/rps-tourney</url>
	<organization>
		<name>Karl M. Davis</name>
	</organization>
	<licenses>
		<license>
			<name>GNU Affero General Public License v3.0</name>
			<url>http://spdx.org/licenses/AGPL-3.0</url>
		</license>
	</licenses>

	<issueManagement>
		<!-- There doesn't seem to be any tooling support for this yet, but it 
			doesn't hurt to include it. -->
		<system>GitHub Issues</system>
		<url>https://github.com/karlmdavis/rps-tourney/issues</url>
	</issueManagement>

	<ciManagement>
		<system>jenkins</system>
		<url>https://justdavis.com/jenkins/job/rps-tourney/</url>
	</ciManagement>

	<scm>
		<!-- URL format taken from http://www.sonatype.com/people/2009/09/maven-tips-and-tricks-using-github/ -->
		<connection>scm:git:git@github.com:karlmdavis/rps-tourney.git</connection>
		<developerConnection>scm:git:git@github.com:karlmdavis/rps-tourney.git</developerConnection>
		<url>https://github.com/karlmdavis/rps-tourney</url>
		<tag>HEAD</tag>
	</scm>

	<distributionManagement>
		<repository>
			<id>justdavis.com-nexus</id>
			<url>https://justdavis.com/nexus/repository/opensource-releases/</url>
		</repository>
		<snapshotRepository>
			<id>justdavis.com-nexus</id>
			<url>https://justdavis.com/nexus/repository/opensource-snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<modules>
		<module>rps-tourney-service-api</module>
		<module>rps-tourney-service-client</module>
		<module>rps-tourney-service-app</module>
		<module>rps-tourney-console</module>
		<module>rps-tourney-webapp</module>
		<module>rps-tourney-benchmarks</module>
		<module>rps-tourney-deployment</module>
	</modules>

	<properties>
		<!-- The version of the Spring Framework artifacts to use. This property 
			isn't used directly here, but is rather intended for use in child projects. -->
		<spring.version>${dependency.springframework.version}</spring.version>

		<!-- The version of Hibernate to use. This property isn't used directly 
			here, but is rather intended for use in child projects. -->
		<hibernate.version>5.2.12.Final</hibernate.version>

		<!-- The version of the Apache CXF artifacts to use across the modules. -->
		<cxf.version>3.2.1</cxf.version>

		<!-- The version of the Jackson artifacts to use across the modules. -->
		<jackson.version>2.9.0</jackson.version>
		
		<!-- The version of Jetty to use in ITs across all the modules. -->
		<jetty.version>9.2.24.v20180105</jetty.version>

		<!-- The default number of parallel forks to use for running the ITs. Note 
			that "C" stands for "core", but also seems to include hyperthreaded cores. -->
		<forkCount.its>0.25C</forkCount.its>

		<!-- Configure Sonar such that the coverage reports for all modules' unit
			and integration tests are stored in a single file in the parent project.
			The JaCoCo configuration for tests also needs to point to this location. -->
		<sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.justdavis.karl.rpstourney</groupId>
				<artifactId>rps-tourney-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.justdavis.karl.rpstourney</groupId>
				<artifactId>rps-tourney-service-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.justdavis.karl.rpstourney</groupId>
				<artifactId>rps-tourney-service-client</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<!-- Used for all sorts of misc. things. -->
				<groupId>com.justdavis.karl.jessentials</groupId>
				<artifactId>jessentials-misc</artifactId>
				<version>[4.0.1-SNAPSHOT,]</version>
			</dependency>
			<dependency>
				<!-- Used to provision and manage Tomcat server instances, for integration 
					tests and such. -->
				<groupId>com.justdavis.karl.jessentials</groupId>
				<artifactId>jessentials-tomcat</artifactId>
				<version>[1.0.0-SNAPSHOT,]</version>
			</dependency>

			<dependency>
				<!-- Logback can be used as the logging target/backend for SLF4J: all 
					logging events would be sent to it, if this dependency is included. -->
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>1.2.3</version>
			</dependency>

			<dependency>
				<!-- Many/most of this project's modules currently use various Spring 
					libraries. This BOM will help prevent version conflicts between them. -->
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			
			<dependency>
				<!-- JDBC drivers for the PostgreSQL open source RDBMS. This version supports 
					Java 8 and above and PostgreSQL 8.2 and above. -->
				<groupId>org.postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>42.6.0</version>
			</dependency>
			<dependency>
				<!-- An in-memory embedded SQL DB. Used as a fast and easy-to-provision 
					DB for manual development testing, as well as unit/integration tests. -->
				<groupId>org.hsqldb</groupId>
				<artifactId>hsqldb</artifactId>
				<version>2.4.0</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<configuration>
						<!-- This setting is marked as experimental, but should prevent partial 
							installs in multi-module builds and releases. -->
						<installAtEnd>true</installAtEnd>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<configuration>
						<!-- This setting is marked as experimental, but should prevent partial 
							deploys in multi-module builds and releases. -->
						<deployAtEnd>true</deployAtEnd>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<configuration>
						<!-- Write all JaCoCo data to the same file, shared by all modules and all
							tests (both unit and integration). -->
						<destFile>${sonar.jacoco.reportPath}</destFile>
						<append>true</append>
						
						<!-- Used by the report goal. -->
						<dataFile>${sonar.jacoco.reportPath}</dataFile>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<!-- Run the ITs in parallel by default, using a separate fork for 
							each runner. To override this, specify a value of "1" for the 'forkCount.its' 
							property on the command line. -->
						<forkCount>${forkCount.its}</forkCount>
						<redirectTestOutputToFile>true</redirectTestOutputToFile>
					</configuration>
				</plugin>
				<plugin>
					<!-- The Cargo plugin can deploy, run, undeploy, etc. WARs. -->
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>1.6.6</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<configuration>
						<!-- All modules will have the same version/lifecycle. -->
						<autoVersionSubmodules>true</autoVersionSubmodules>
					</configuration>
					<executions>
						<execution>
							<!-- Undoing the config in the parent POM. -->
							<id>default</id>
							<goals>
								<goal>perform</goal>
							</goals>
							<configuration>
								<pomFileName>pom.xml</pomFileName>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
