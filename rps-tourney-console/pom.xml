<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.rpstourney</groupId>
		<artifactId>rps-tourney-parent</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>rps-tourney-console</artifactId>
	<packaging>jar</packaging>

	<name>rps-tourney-console</name>
	<description>A text console version of the "Rock-Paper-Scissors Tourney" game.</description>

	<properties>
		<!-- The path to the parent POM's `dev` directory'. Needs to be redefined in each project, so that POM
			inheritance doesn't goof it up. -->
		<rps.dev.path>${project.basedir}/../dev</rps.dev.path>
	</properties>

	<dependencies>
		<dependency>
			<!-- Provides misc utility classes. -->
			<groupId>com.justdavis.karl.jessentials</groupId>
			<artifactId>jessentials-misc</artifactId>
		</dependency>
		<dependency>
			<!-- Provides the underlying game models and API. -->
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-api</artifactId>
		</dependency>
		<dependency>
			<!-- Provides the HTTP client for the game web service. -->
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-client</artifactId>
		</dependency>

		<dependency>
			<!-- SLF4J is used to make the Java logging dependency mess somewhat sane.
				Its APIs should be used by all of the application suite for logging, rather
				than the java.util logging, log4j, or whatever else. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J: all logging
				events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<!-- Handles command line argument parsing. -->
			<groupId>args4j</groupId>
			<artifactId>args4j</artifactId>
			<version>2.33</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The web service WAR, which also needs to be deployed during integration
				testing. -->
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-app</artifactId>
			<version>${project.version}</version>
			<type>war</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- An in-memory embedded SQL DB. Used as a fast and easy-to-provision
				DB for integration tests. -->
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/java</directory>
				<includes>
					<!-- This override of the defaults is necessary to ensure that non-.java
						resource files are included in builds and jars, and that they get filtered. -->
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<classpathPrefix>lib/</classpathPrefix>
								<mainClass>com.justdavis.karl.rpstourney.app.console.ConsoleApp</mainClass>
							</manifest>
						</archive>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.1.0</version>
					<configuration>
						<descriptors>
							<descriptor>src/main/assembly/dist.xml</descriptor>
						</descriptors>
					</configuration>
				</plugin>
				<plugin>
					<!-- Configure the Cargo plugin to start up an embedded Jetty server,
						running the web service needed by the integration tests. -->
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<configuration>
						<container>
							<containerId>jetty9x</containerId>
							<artifactInstaller>
								<!-- Use a throwaway Jetty install (in the project's target/ directory)
									to run the ITs. Tried using an embedded Jetty instance via Cargo, but the
									web application fails to deploy that way for some reason: it throws "java.lang.IllegalStateException:
									zip file closed" errors. -->
								<groupId>org.eclipse.jetty</groupId>
								<artifactId>jetty-distribution</artifactId>
								<version>${jetty.version}</version>
							</artifactInstaller>
							<log>${project.build.directory}/failsafe-reports/cargo.log</log>
							<output>${project.build.directory}/failsafe-reports/cargo-container.log</output>
							<systemProperties>
								<rps.service.config.path>${project.build.testOutputDirectory}/rps-service-config-its.xml</rps.service.config.path>
								<logback.configurationFile>${project.build.testOutputDirectory}/logback-cargo.xml</logback.configurationFile>
							</systemProperties>
							<dependencies>
								<dependency>
									<!-- Only used by the web service WAR, but no harm in adding it
										to the container's classpath. -->
									<groupId>org.hsqldb</groupId>
									<artifactId>hsqldb</artifactId>
								</dependency>
							</dependencies>
						</container>
						<configuration>
							<properties>
								<cargo.servlet.port>9093</cargo.servlet.port>

								<!-- Collect JaCoCo coverage data for the classes running in the web server. -->
								<cargo.jvmargs>${argLine}</cargo.jvmargs>
							</properties>
						</configuration>
						<deployables>
							<deployable>
								<!-- The web service WAR for the application. -->
								<groupId>com.justdavis.karl.rpstourney</groupId>
								<artifactId>rps-tourney-service-app</artifactId>
								<type>war</type>
								<properties>
									<context>/rps-tourney-service-app</context>
								</properties>
							</deployable>
						</deployables>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime
							agent (configured to track information on unit test coverage), such that
							it can be passed as a VM argument to the application under test. Surefire
							will pick up this property automatically, by default. Sonar can then pick
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime
							agent (configured to track information on integration test coverage), such
							that it can be passed as a VM argument to the application under test. Failsafe
							will pick up this property automatically, by default. Sonar can then pick
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>make-assembly</id>
						<goals>
							<goal>single</goal>
						</goals>
						<phase>package</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Launch an embedded Jetty instance hosting the rps-tourney-service-app
					WAR (needed by the integration tests) prior to running this project's integration
					tests, and stop it after the integration tests. Alternatively, for manual
					testing, manually run 'mvn cargo:run' to start the Jetty server, and have
					Cargo wait for a 'ctrl+c' command to stop it. -->
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<executions>
					<execution>
						<id>start-container</id>
						<goals>
							<goal>start</goal>
						</goals>
						<phase>pre-integration-test</phase>
					</execution>
					<execution>
						<id>stop-container</id>
						<goals>
							<goal>stop</goal>
						</goals>
						<phase>post-integration-test</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
