<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.rpstourney</groupId>
		<artifactId>rps-tourney-parent</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>rps-tourney-webapp</artifactId>
	<packaging>war</packaging>

	<name>rps-tourney-webapp</name>
	<description>
		A web application for playing the "Rock-Paper-Scissors Tourney" game.
		Uses rps-tourney-service-app to handle all gameplay (and a bunch of 
		other functions.)
	</description>

	<properties>
		<!-- The version of the Spring Security framework artifacts to use. Note 
			that this library has a different release cycle (and version number) than 
			the "core" Spring Framework project. -->
		<spring.security.version>5.0.1.RELEASE</spring.security.version>

		<!-- Exclude the third-party JavaScript files from static analysis via 
			SonarQube. -->
		<sonar.exclusions>
			src/main/webapp/WEB-INF/resources/js/vendor/*
		</sonar.exclusions>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- This BOM is required to avoid problems caused by the different (but 
					compatible) versions of Spring MVC and Spring Security being used here. -->
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-client</artifactId>
		</dependency>

		<dependency>
			<!-- Provides annotations that specify dependency injection points. -->
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>

		<dependency>
			<!-- A version of this library is needed to compile, but will already 
				be bundled with whatever application server this WAR is deployed to. -->
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<!-- This API is needed to compile the custom JSP tags in this project. 
				Marked provided so that it doesn't conflict with the deployment container's 
				built-in JSP library. -->
			<groupId>org.eclipse.jetty.orbit</groupId>
			<artifactId>javax.servlet.jsp</artifactId>
			<version>2.2.0.v201112011158</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<!-- Provides a JSP implementation to use at compile time (also required 
				by some of the unit tests). At runtime, though, this will be supplied by 
				the application container. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-jsp</artifactId>
			<version>${jetty.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<!-- The Spring MVC web framework (which includes many other Spring libraries, 
				including their dependency injection framework). -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<exclusions>
				<exclusion>
					<!-- We're using SLF4J to handle logging, so need to exclude this and 
						then include org.slf4j:jcl-over-slf4j in its place. -->
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Used to re-route commons-logging:commons-logging calls to SLF4J. 
				Seems that spring-webmvc needs this. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<!-- Required because JSP views are used in Spring MVC. -->
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<!-- The Spring Security framework is used for authentication and authorization. -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<!-- The Spring Security framework is used for authentication and authorization. -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<!-- The Spring Security framework is used for authentication and authorization. -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<!-- Provides annotations for securing resources, e.g. @RolesAllowed, 
				@PermitAll, etc. -->
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<!-- The Jackson library allows Spring MVC to support JSON ReST resources. -->
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<dependency>
			<!-- Used to format date-times into "pretty" strings, e.g. "5 minutes 
				ago". -->
			<groupId>org.ocpsoft.prettytime</groupId>
			<artifactId>prettytime</artifactId>
			<version>4.0.1.Final</version>
		</dependency>

		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J: all logging 
				events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<!-- Used to re-route java.util.logging calls to SLF4J. Seems that at 
				least jetty-jsp needs this, and we'll include it in the compile scope just 
				to cover anything else that might be. -->
			<!-- See http://www.slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html 
				for details on how to activate this re-routing within an application. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>

		<dependency>
			<!-- JUnit is used for all unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The project's dependency injection provider. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		<dependency>
			<!-- The web service WAR, which also needs to be deployed during integration 
				testing. -->
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-app</artifactId>
			<version>${project.version}</version>
			<type>war</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- An in-memory embedded SQL DB. Used as a fast and easy-to-provision 
				DB for unit/integration tests. -->
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Selenium is a browser automation/test framework and is used to drive 
				this project's integration tests. -->
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>htmlunit-driver</artifactId>
			<version>2.29.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Used to fetch web resources required for build. -->
					<groupId>com.googlecode.maven-download-plugin</groupId>
					<artifactId>download-maven-plugin</artifactId>
					<version>1.7.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<configuration>
						<webResources>
							<resource>
								<!-- This entry here is needed as WRO4J leaves out the fonts from 
									Bootstrap and FontAwesome. -->
								<!-- Any resources listed here also have to be whitelisted in SecurityConfig.configure(WebSecurity) 
									and SpringMvcConfig.addResourceHandlers(ResourceHandlerRegistry). -->
								<directory>${project.build.directory}/generated-war-resources/</directory>
								<targetPath>WEB-INF/resources</targetPath>
								<includes>
									<include>bootstrap-3.2.0/fonts/**</include>
									<include>font-awesome-4.7.0/fonts/**</include>
								</includes>
							</resource>
						</webResources>
					</configuration>
				</plugin>
				<plugin>
					<!-- Configure the Web Resource Optimizer for Java (wro4j) as part of 
						the build. This tool minifies JS, compiles LESS CSS, etc. See https://code.google.com/p/wro4j/ 
						and https://github.com/jbosstools/m2e-wro4j/wiki/Sample-twitter-bootstrap-project 
						for details. -->
					<groupId>ro.isdc.wro4j</groupId>
					<artifactId>wro4j-maven-plugin</artifactId>
					<version>1.8.0</version>
					<configuration>
						<wroManagerFactory>ro.isdc.wro.maven.plugin.manager.factory.ConfigurableWroManagerFactory</wroManagerFactory>
						<!-- Run wro4j against both the unprocessed resource sources and the 
							generated WAR resources (e.g. Bootstrap). Note that wro4j will not perform 
							Maven resource filtering. -->
						<!-- A large part of the inspiration for this particular configuration 
							is taken from the m2e-wro4j documentation: https://github.com/jbosstools/m2e-wro4j/wiki/Sample-twitter-bootstrap-project -->
						<contextFolder>${basedir}/src/main/webapp,${project.build.directory}/generated-war-resources/</contextFolder>
						<ignoreMissingResources>false</ignoreMissingResources>
						<destinationFolder>${project.build.outputDirectory}/${project.build.finalName}</destinationFolder>
						<cssDestinationFolder>${project.build.directory}/${project.build.finalName}/WEB-INF/resources/css</cssDestinationFolder>
						<jsDestinationFolder>${project.build.directory}/${project.build.finalName}/WEB-INF/resources/js</jsDestinationFolder>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>com.github.sommeri</groupId>
							<artifactId>less4j</artifactId>
							<version>1.17.2</version>
						</dependency>
						<dependency>
								<!-- This is a workaround for an error that only appears when trying to build in Eclipse.
									Reference: https://stackoverflow.com/a/55909779 -->
							<groupId>org.mockito</groupId>
							<artifactId>mockito-core</artifactId>
							<version>2.18.0</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<!-- Configure the Cargo plugin to start up an embedded Jetty server, 
						running both this project's WAR and the WAR for the web service that it interacts 
						with. -->
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<configuration>
						<container>
							<containerId>jetty9x</containerId>
							<artifactInstaller>
								<!-- Use a throwaway Jetty install (in the project's target/ directory) 
									to run the ITs. Tried using an embedded Jetty instance via Cargo, but the 
									web application fails to deploy that way for some reason: it throws "java.lang.IllegalStateException: 
									zip file closed" errors. -->
								<groupId>org.eclipse.jetty</groupId>
								<artifactId>jetty-distribution</artifactId>
								<version>${jetty.version}</version>
							</artifactInstaller>
							<log>${project.build.directory}/failsafe-reports/cargo.log</log>
							<output>${project.build.directory}/failsafe-reports/cargo-container.log</output>
							<systemProperties>
								<rps.service.config.path>${project.build.testOutputDirectory}/rps-service-config-its.xml</rps.service.config.path>
								<rps.webapp.config.path>${project.build.testOutputDirectory}/rps-webapp-config-its.xml</rps.webapp.config.path>
								<logback.configurationFile>${project.build.testOutputDirectory}/logback-cargo.xml</logback.configurationFile>
							</systemProperties>
							<dependencies>
								<dependency>
									<!-- Only used by the web service WAR, but no harm in adding it 
										to the container's classpath. -->
									<groupId>org.hsqldb</groupId>
									<artifactId>hsqldb</artifactId>
								</dependency>
							</dependencies>
						</container>
						<configuration>
							<properties>
								<cargo.servlet.port>9093</cargo.servlet.port>

								<!-- Collect JaCoCo coverage data for the classes running in the web server. -->
								<cargo.jvmargs>${argLine}</cargo.jvmargs>
							</properties>
						</configuration>
						<deployables>
							<deployable>
								<!-- The web service WAR for the application. -->
								<groupId>com.justdavis.karl.rpstourney</groupId>
								<artifactId>rps-tourney-service-app</artifactId>
								<type>war</type>
								<properties>
									<context>/rps-tourney-service-app</context>
								</properties>
							</deployable>
							<deployable>
								<!-- The end-user web site WAR for the application. As this is the 
									current project, Cargo binds the artifact automatically. All that needs to 
									be done here is to configure the context path. -->
								<groupId>com.justdavis.karl.rpstourney</groupId>
								<artifactId>rps-tourney-webapp</artifactId>
								<type>war</type>
								<properties>
									<context>/rps-tourney-webapp</context>
								</properties>
							</deployable>
						</deployables>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on unit test coverage), such that 
							it can be passed as a VM argument to the application under test. Surefire 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on integration test coverage), such 
							that it can be passed as a VM argument to the application under test. Failsafe 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.googlecode.maven-download-plugin</groupId>
				<artifactId>download-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Bootstrap is an HTML5 template, and is the basis of this web
							application's design. The source version of Bootstrap is used here (rather
							than the release distributable) so that the LESS mixins can be used. Rather
							than including it in our sources, we instead download and unpack it as part
							of every build. -->
						<id>fetch-bootstrap</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>wget</goal>
						</goals>
						<configuration>
							<url>https://github.com/twbs/bootstrap/archive/v3.2.0.zip</url>
							<unpack>true</unpack>
							<!-- Drop the bootstrap source and resources into the WAR's output
								resources directory, as the fonts from Bootstrap will need to be referenced
								by its compiled LESS. -->
							<outputDirectory>${project.build.directory}/generated-war-resources</outputDirectory>
							<md5>a8596bafe547e31e922a72406e61657b</md5>
						</configuration>
					</execution>
					<execution>
						<!-- Font Awesome is similar to Bootstrap's Glyphicons, but way more
							comprehensive: it provides a symbol font and CSS classes to make it easier
							to use. -->
						<id>fetch-fontawesome</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>wget</goal>
						</goals>
						<configuration>
							<!-- TODO verify that 4.7.0 works, as 4.4.0 was being used before -->
							<url>https://fontawesome.com/v4/assets/font-awesome-4.7.0.zip</url>
							<unpack>true</unpack>
							<!-- Drop the Font Awesome resources into the WAR's output resources
								directory. -->
							<outputDirectory>${project.build.directory}/generated-war-resources</outputDirectory>
							<md5>91d2dc6bc4a47d77c9862bf49892d524</md5>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Run the Web Resource Optimizer for Java (wro4j) as part of the build. 
					This tool minifies JS, compiles LESS CSS, etc. See https://code.google.com/p/wro4j/ 
					and https://github.com/jbosstools/m2e-wro4j/wiki/Sample-twitter-bootstrap-project 
					for details. -->
				<groupId>ro.isdc.wro4j</groupId>
				<artifactId>wro4j-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Launch an embedded Jetty instance hosting this project's WAR (as 
					well as the rps-tourney-service-app WAR it depends on) prior to running this 
					project's integration tests, and stop it after the integration tests. Alternatively, 
					for manual testing, manually run 'mvn cargo:run' to start the Jetty server, 
					and have Cargo wait for a 'ctrl+c' command to stop it. -->
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<executions>
					<execution>
						<id>start-container</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop-container</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of 
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- This profile will only be active when building inside of Eclipse, 
				with the m2e plugin installed. -->
			<id>m2e</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!--This plugin's configuration is used to store Eclipse m2e settings 
							only. It has no influence on the Maven build itself. -->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<!-- Run the dependency plugin even when building in Eclipse. -->
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-dependency-plugin</artifactId>
												<versionRange>[2.8,)</versionRange>
												<goals>
													<goal>unpack</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute>
													<runOnIncremental>false</runOnIncremental>
												</execute>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>

</project>
