<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.rpstourney</groupId>
		<artifactId>rps-tourney-parent</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>rps-tourney-service-app</artifactId>
	<packaging>war</packaging>

	<name>rps-tourney-service-app</name>
	<description>
		The server-side implementation of the web service layer of the 
		"Rock-Paper-Scissors Tourney" game, which allow for play over the Internet.
	</description>

	<dependencies>
		<dependency>
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-api</artifactId>
		</dependency>

		<dependency>
			<!-- Apache CXF is the framework used to run the JAX-RS web service in 
				this project. -->
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<!-- A version of this library is needed to compile, but will already 
				be bundled with whatever application server this WAR is deployed to. -->
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<!-- Provides annotations that specify dependency injection points. -->
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>
		<dependency>
			<!-- The project's dependency injection provider. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<exclusions>
				<exclusion>
					<!-- We're using SLF4J to handle logging, so need to exclude this and 
						then include org.slf4j:jcl-over-slf4j in its place. -->
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Used to re-route commons-logging:commons-logging calls to SLF4J. 
				Seems that spring-web needs this. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<!-- The Spring framework's JPA-related APIs, which make working with 
				JPA a bit easier. -->
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>2.0.3.RELEASE</version>
		</dependency>

		<dependency>
			<!-- Hibernate is a popular ORM that implements the JPA 2.1 spec. It's 
				used for building and interacting with the application's SQL database. -->
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
			<exclusions>
				<exclusion>
					<!-- These interfaces, etc. are now included in the JRE. -->
					<artifactId>xml-apis</artifactId>
					<groupId>xml-apis</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Hibernate is a popular ORM that implements the JPA 2.1 spec. It's
				used for building and interacting with the application's SQL database. (We
				declare it specifically here to cancel out the exclusions for it in 'rps-tourney-service-api'.) -->
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<!-- JDBC drivers for the PostgreSQL open source RDBMS. This version supports 
				Java 8 and above and PostgreSQL 8.2 and above. -->
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
		<dependency>
			<!-- An in-memory embedded SQL DB. Used as a fast and easy-to-provision 
				DB for manual development testing, as well as unit/integration tests. -->
			<!-- Not marked as 'test' scope or optional, to allow its use with the 
				Eclipse Tomcat plugin. -->
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
		</dependency>

		<dependency>
			<!-- Provides full JSR 349 Bean Validation 1.1 support (it's actually 
				the reference implementation for it). -->
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.7.Final</version>
		</dependency>
		<dependency>
			<!-- Contains the API for the "Unified Expression Language" handler, which 
				is used as part of bean validation. -->
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<!-- Contains an implementation for the "Unified Expression Language" 
				handler, which is used as part of bean validation. -->
			<groupId>org.glassfish</groupId>
			<artifactId>javax.el</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<!-- This is required by hibernate-validator's @SafeHtml annotation. -->
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.14.2</version>
		</dependency>

		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J: all logging 
				events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<!-- Used to re-route java.util.logging calls to SLF4J. No clue if anything's 
				using JUL, but it seems likely, so we'll include this just in case. -->
			<!-- See http://www.slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html 
				for details on how to activate this re-routing within an application. -->
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>
		<dependency>
			<!-- Needed to replace log4j, which is used by other dependencies here 
				(and excluded). -->
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
		</dependency>

		<dependency>
			<!-- Provides access to both a native (platform-specific) and a pure-Java 
				implementation of the scrypt key derivation function. -->
			<groupId>com.lambdaworks</groupId>
			<artifactId>scrypt</artifactId>
			<version>1.4.0</version>
		</dependency>

		<dependency>
			<!-- JUnit is used for all unit and integration tests. -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The rps-tourney-service-client project is used to integration test 
				this project, and vice-versa. Sonar and JaCoCo are smart enough to pick up 
				the code coverage for both, even though the integration tests are only run 
				in this project. -->
			<groupId>com.justdavis.karl.rpstourney</groupId>
			<artifactId>rps-tourney-service-client</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- The project's dependency injection provider. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Jetty is used to host the web service for ITs. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Jetty is used to host the web service for ITs. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Used to generate the SSL cert that is used in the ITs (by Jetty). -->
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-jdk15on</artifactId>
			<version>1.59</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<!-- For some mysterious reason, I get SocketExceptions if I run the 
							ITs on OpenJDK without forking for each test. I'd guess that there's a bug 
							in OpenJDK's HttpClient, but I really haven't been able to diagnose the issue. -->
						<reuseForks>false</reuseForks>

						<!-- This is required to ensure that Jetty's classpath scanning works 
							correctly. Without it, we'll get "No Spring WebApplicationInitializer types 
							detected on classpath" errors in Jetty, and the webapp will fail to start 
							correctly during our tests. Reported the bug to Eclipse: https://bugs.eclipse.org/bugs/show_bug.cgi?id=447790. -->
						<useManifestOnlyJar>false</useManifestOnlyJar>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on unit test coverage), such that 
							it can be passed as a VM argument to the application under test. Surefire 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on integration test coverage), such 
							that it can be passed as a VM argument to the application under test. Failsafe 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of 
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
